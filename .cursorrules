{
  "project": {
    "name": "MockyLab Frontend",
    "type": "Next.js",
    "description": "Professional mockup design solution with Printify integration"
  },
  "architecture": {
    "routing": {
      "base": "/src/app",
      "protected_routes": ["/mockup/*", "/printify/*", "/profile/*", "/settings/*", "/desingcreate"],
      "public_routes": ["/login", "/"],
      "auth_redirect": {
        "default": "/mockup/list",
        "unauthorized": "/login"
      }
    },
    "api": {
      "base_url": "process.env.NEXT_PUBLIC_API_URL || 'https://api.mockylab.com'",
      "endpoints": {
        "auth": {
          "login": "/auth/login",
          "refresh": "/auth/refresh"
        },
        "printify": {
          "blueprints": "/Printify/blueprints",
          "variants": "/Printify/variants",
          "settings": "/Printify/settings"
        },
        "mockups": {
          "base": "/Mockup",
          "design_areas": "/mockups/{mockupId}/design-areas",
          "user": "/UserOfMockup",
          "generate": "/Mockup/generate"
        },
        "ideogram": {
          "get_description": "/Ideogram/get-description",
          "remix": "/Ideogram/remix",
          "remove_background": "/Ideogram/remove-background",
          "download_image": "/Ideogram/download-image",
          "get_processed_image": "/Ideogram/get-processed-image"
        },
        "user_variants": {
          "get": "/api/UserOfVariant/{id}",
          "get_by_user": "/api/UserOfVariant/user/{userId}",
          "get_by_blueprint": "/api/UserOfVariant/user/{userId}/blueprint/{blueprintId}",
          "create": "/api/UserOfVariant",
          "create_bulk": "/api/UserOfVariant/bulk",
          "update": "/api/UserOfVariant/{id}",
          "delete": "/api/UserOfVariant/{id}"
        }
      }
    }
  },
  "features": {
    "auth": {
      "token_storage": ["localStorage", "cookies"],
      "token_key": "token",
      "refresh_token_key": "refreshToken",
      "user_key": "user",
      "cookie_options": {
        "token": {
          "expires": "1 day",
          "secure": true,
          "sameSite": "strict"
        },
        "refreshToken": {
          "expires": "7 days",
          "secure": true,
          "sameSite": "strict"
        }
      }
    },
    "printify": {
      "required_settings": ["apiKey", "shopId"],
      "blueprint_flow": [
        "List available blueprints",
        "Select blueprint",
        "Sync variants",
        "Add to user blueprints"
      ],
      "blueprints": {
        "list_view": {
          "pagination": true,
          "search": true,
          "filtering": true,
          "error_handling": true
        },
        "detail_view": {
          "variant_sync": true,
          "variant_pagination": true,
          "error_states": true
        },
        "my_blueprints": {
          "structure": {
            "maintain_user_data": true,
            "merge_blueprint_details": true
          },
          "error_handling": {
            "blueprint_not_found": true,
            "api_errors": true
          }
        }
      },
      "settings": {
        "api_key_management": {
          "secure_storage": true,
          "validation": true
        },
        "shop_management": {
          "id_validation": true,
          "connection_test": true
        }
      },
      "variants": {
        "management": {
          "modal": {
            "search": true,
            "pagination": true,
            "grid_view": true,
            "save_changes": true
          },
          "operations": {
            "toggle_enabled": true,
            "update_price": true,
            "bulk_create": true
          }
        },
        "user_variants": {
          "structure": {
            "id": "number",
            "userId": "number",
            "blueprintId": "number",
            "variantId": "number",
            "defaultPrice": "number",
            "isEnabled": "boolean",
            "isActive": "boolean",
            "createdAt": "string",
            "updatedAt": "string"
          },
          "endpoints": {
            "get": "/api/UserOfVariant/{id}",
            "get_by_user": "/api/UserOfVariant/user/{userId}",
            "get_by_blueprint": "/api/UserOfVariant/user/{userId}/blueprint/{blueprintId}",
            "create": "/api/UserOfVariant",
            "create_bulk": "/api/UserOfVariant/bulk",
            "update": "/api/UserOfVariant/{id}",
            "delete": "/api/UserOfVariant/{id}"
          }
        },
        "products": {
          "list": {
            "endpoint": "/api/Printify/shops/{shopId}/products",
            "response": {
              "data": {
                "data": "Product[]",
                "current_page": "number",
                "last_page": "number",
                "total": "number",
                "per_page": "number"
              },
              "fromCache": "boolean"
            }
          },
          "detail": {
            "endpoint": "/api/Printify/shops/{shopId}/products/{productId}",
            "response": {
              "id": "string",
              "title": "string",
              "description": "string",
              "tags": "string[]",
              "images": {
                "src": "string",
                "isDefault": "boolean"
              }[],
              "variants": "ProductVariant[]",
              "createdAt": "string",
              "updatedAt": "string",
              "visible": "boolean"
            }
          },
          "updateTags": {
            "endpoint": "/api/Printify/shops/{shopId}/products/{productId}/tags",
            "request": {
              "tags": "string[]"
            }
          }
        }
      }
    },
    "mockup": {
      "generation_flow": [
        "Select mockups (from quick select or favorites)",
        "Upload designs per mockup or use bulk upload",
        "Generate and download mockups"
      ],
      "design_upload_options": {
        "individual": {
          "single_design": "One design for all areas",
          "multiple_designs": "Different design per area (for mockups with multiple areas)"
        },
        "bulk": {
          "black_designs": "Upload for all black design mockups",
          "white_designs": "Upload for all white design mockups",
          "color_designs": "Upload for all color design mockups"
        }
      },
      "design_area_calculation": {
        "position": {
          "centerX": "(group.left - imageLeft) / imageScale",
          "centerY": "(group.top - imageTop) / imageScale"
        },
        "dimensions": {
          "width": "rect.getScaledWidth() / imageScale",
          "height": "rect.getScaledHeight() / imageScale"
        },
        "angle": "group.angle"
      },
      "required_fields": [
        "name",
        "category",
        "designColor",
        "designAreas"
      ],
      "design_color_types": {
        "Black": 0,
        "White": 1,
        "Color": 2
      }
    },
    "design_create": {
      "flow": [
        "Upload original image",
        "Get AI description",
        "Edit description (optional)",
        "Generate remixed image",
        "Remove background (optional)",
        "Download with/without background"
      ],
      "image_processing": {
        "supported_formats": ["image/*"],
        "max_file_size": "10MB",
        "preview_dimensions": {
          "height": "400px",
          "width": "100%",
          "object_fit": "contain"
        }
      },
      "api_integration": {
        "description": "Uses Ideogram API for image processing and remixing",
        "endpoints": {
          "get_description": {
            "method": "POST",
            "content_type": "multipart/form-data",
            "response": {
              "description": "string",
              "tempPath": "string"
            }
          },
          "remix": {
            "method": "POST",
            "content_type": "multipart/form-data",
            "response": {
              "remixImageUrl": "string"
            }
          },
          "remove_background": {
            "method": "POST",
            "content_type": "application/json",
            "response": {
              "backgroundRemovedImageUrl": "string"
            }
          }
        }
      }
    },
    "theme": {
      "mode_settings": {
        "light": {
          "background": "bg-white",
          "text": "text-black",
          "description": "Default light mode with white background and dark text"
        },
        "dark": {
          "background": "dark:bg-boxdark",
          "text": "dark:text-white",
          "description": "Dark mode with boxdark background and white text"
        }
      },
      "implementation": {
        "global_styles": {
          "location": "/src/app/globals.css",
          "body_class": "@apply bg-white dark:bg-boxdark text-black dark:text-white"
        },
        "tailwind_config": {
          "location": "tailwind.config.ts",
          "darkMode": "class",
          "colors": {
            "boxdark": "#24303F",
            "white": "#FFFFFF",
            "black": "#1C2434"
          }
        }
      },
      "best_practices": [
        "Use Tailwind dark mode classes for theme consistency",
        "Apply theme colors through globals.css for base styles",
        "Avoid direct color codes in components",
        "Use semantic color names from Tailwind config"
      ]
    }
  },
  "conventions": {
    "components": {
      "naming": "PascalCase",
      "location": "/src/components"
    },
    "pages": {
      "naming": "kebab-case",
      "structure": "page.tsx in each route directory"
    },
    "api": {
      "client": "apiClient from @/utils/apiConfig",
      "error_handling": "handleApiError from @/utils/apiConfig"
    },
    "auth": {
      "token_management": {
        "storage": "Dual storage in localStorage and cookies for better security",
        "refresh": "Automatic token refresh on expiration",
        "cleanup": "Complete cleanup on logout (localStorage, cookies, headers)"
      }
    }
  },
  "workflow": {
    "page_development": [
      "Define route and component structure",
      "Implement authentication check",
      "Add API integration",
      "Implement UI components",
      "Add error handling",
      "Test functionality"
    ],
    "auth_flow": [
      "Login with username/password",
      "Store tokens in both localStorage and cookies",
      "Automatic token refresh",
      "Protected route redirection",
      "Clean logout with full cleanup"
    ]
  },
  "rules": {
    "auth": {
      "token_handling": {
        "storage": ["localStorage", "cookies"],
        "validation": {
          "required": true,
          "check_expiration": true,
          "auto_logout": true
        },
        "refresh": {
          "enabled": true,
          "prevent_infinite_loop": true
        }
      }
    },
    "api_responses": {
      "blueprint_handling": {
        "maintain_original_structure": true,
        "merge_details": true,
        "error_handling": {
          "provide_fallback": true,
          "log_errors": true
        }
      },
      "settings_handling": {
        "validate_api_key": true,
        "validate_shop_id": true,
        "secure_storage": true
      }
    },
    "type_safety": {
      "strict_null_checks": true,
      "no_implicit_any": true
    },
    "code_quality": {
      "prevent_infinite_loops": true,
      "handle_edge_cases": true,
      "proper_error_handling": true
    },
    "components": {
      "modals": {
        "blueprint_select": {
          "maintain_state": true,
          "handle_selection": true,
          "pagination": true
        },
        "variant_management": {
          "search": true,
          "pagination": true,
          "grid_view": true,
          "save_changes": true,
          "error_handling": true
        }
      }
    }
  }
} 